<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>《电磁场与电磁波》课程设计：MIMO天线的设计与仿真</title>
    <url>/2024/05/05/MIMO%E5%A4%A9%E7%BA%BF%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E4%BB%BF%E7%9C%9F/</url>
    <content><![CDATA[<h1 id="MIMO天线的设计与仿真"><a href="#MIMO天线的设计与仿真" class="headerlink" title="MIMO天线的设计与仿真"></a>MIMO天线的设计与仿真</h1><h2 id="1-课程设计要求及目的"><a href="#1-课程设计要求及目的" class="headerlink" title="1. 课程设计要求及目的"></a>1. <strong>课程设计要求及目的</strong></h2><h3 id="1-1-设计目的"><a href="#1-1-设计目的" class="headerlink" title="1.1 设计目的"></a>1.1 <strong>设计目的</strong></h3><p>&emsp;&emsp;(1)了解微波仿真软件的功能。<br>&emsp;&emsp;(2)熟悉微波仿真软件的使用。<br>&emsp;&emsp;(3)通过微波仿真，加深对电磁场与电磁波的理解。</p>
<h3 id="1-2-设计要求"><a href="#1-2-设计要求" class="headerlink" title="1.2 设计要求"></a>1.2 <strong>设计要求</strong></h3><pre><code>  频率范围：2450MHz～2550MHz，5100MHz～5750MHz
  驻波比：≤2
  增益：3dB;
  两单元MIMO天线
  天线在2400MHz～2500MHz
  频带内单元间隔离度≥40dB
  天线尺寸：100mm×100mm×20mm
  相对介电常数：3.1
  基板厚度：1.519mm
</code></pre>
<h2 id="2-MIMO天线原理"><a href="#2-MIMO天线原理" class="headerlink" title="2. MIMO天线原理"></a>2. <strong>MIMO天线原理</strong></h2><h3 id="2-1-微带天线相关理论基础"><a href="#2-1-微带天线相关理论基础" class="headerlink" title="2.1 微带天线相关理论基础"></a>2.1 <strong>微带天线相关理论基础</strong></h3><p>&emsp;&emsp;微带天线在性能和制造方面具有许多优点。首先，它具有重量轻、结构薄的特点，这使得它可以方便地附着于物体壁面等表面。其次，微带天线的种类越来越多，发展迅速，并且已经广泛应用于各种系统中。随着微带天线应用的广泛化，对微带天线的研究和发展也越来越深入。微带天线的理论研究日趋成熟，相关理论对于实际设计和分析微带天线具有重要的指导意义。因此，学习和研究微带天线理论具有重大意义。</p>
<h4 id="2-1-1微带天线结构和分类"><a href="#2-1-1微带天线结构和分类" class="headerlink" title="2.1.1微带天线结构和分类"></a>2.1.1微带天线结构和分类</h4><p>&emsp;&emsp;微带天线是一种由导体薄片粘贴在背面有导体接地板的介质基片上形成的天线。通常使用微带传输线或同轴探针来馈电，以激励导体贴片与接地板之间的高频电磁场，并通过贴片四周与接地板之间的缝隙向外辐射。<br>&emsp;&emsp;根据结构特征，微带天线可分为两种类型：微带贴片天线和微带缝隙天线。微带贴片天线是将导体薄片直接粘贴在介质基片上，通过微带传输线或同轴探针进行馈电，从而激励高频电磁场，并通过贴片四周与接地板之间的缝隙向外辐射。另一种类型是微带缝隙天线，它在接地板上开设缝隙来实现馈电。在介质基片的另一面，使用微带馈线连接到接地板上开设的缝隙槽，这些缝隙可以有不同的形状。根据缝隙的不同形状，可以将其分为窄缝（缝宽远小于波长）和宽缝（缝宽与波长相比）两种形式。<br>&emsp;&emsp;此外，根据极化方式，微带天线还可以分为线极化天线、椭圆极化天线和圆极化天线等。根据工作原理，微带天线可以分为谐振型和非谐振型微带天线。</p>
<h4 id="2-1-2MIMO天线介绍"><a href="#2-1-2MIMO天线介绍" class="headerlink" title="2.1.2MIMO天线介绍"></a>2.1.2MIMO天线介绍</h4><p>&emsp;&emsp;MIMO(Multiple-Input Multiple-Output)技术指在发射端和接收端分别使用多个发射天线和接收天线，使信号通过发射端与接收端的多个天线传送和接收，从而改善通信质量。他能充分利用空间资源，通过多个天线实现多发多收，在不增加频谱资源和天线发射功率的情况下，可以成倍的提高系统信道容量。</p>
<img src="/2024/05/05/MIMO%E5%A4%A9%E7%BA%BF%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E4%BB%BF%E7%9C%9F/2-1.png" class title="img">
<p>&emsp;&emsp;MIMO技术最早由无线通信技术的鼻祖马可尼（Marconi）于1908年提出。他认为可以通过在发射设备和接收设备布置多个天线来抑制信道衰落，从而提升无线通信系统的质量。</p>
<h3 id="2-2-天线参数理论分析与数据计算"><a href="#2-2-天线参数理论分析与数据计算" class="headerlink" title="2.2 天线参数理论分析与数据计算"></a>2.2 <strong>天线参数理论分析与数据计算</strong></h3><p>&emsp;&emsp;天线单个辐射单元由印制在介质基板正反两面的两个倒L形辐射枝节组成,其中背面倒 L 形辐射枝节与金属地板相连接, 通过将两个天线单元以对称分布形式进行摆放, 并在天线单元之间加载一个T形地板枝节,本文所设计MIMO天线的整体结构。辐射部分和地板采用理想导体边界。</p>
<img src="/2024/05/05/MIMO%E5%A4%A9%E7%BA%BF%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E4%BB%BF%E7%9C%9F/2-2.png" class title="img">
<p>&emsp;&emsp;通常，在单极子天线的设计中，其长度一般设置为1&#x2F;4 个自由空间波长，但是对于印刷天线来说，天线是印制在介质基板上的，所以要综 合衡量基板介电常数对天线辐射性能的影响，因此根据设计经验，印刷单极子天线 的长度范围往往设置在1&#x2F;4个自由空间波长与1&#x2F;4个介质波长之间。</p>
<img src="/2024/05/05/MIMO%E5%A4%A9%E7%BA%BF%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E4%BB%BF%E7%9C%9F/2-3.png" class title="img"> 
<h2 id="3-仿真分析"><a href="#3-仿真分析" class="headerlink" title="3. 仿真分析"></a>3. <strong>仿真分析</strong></h2><h3 id="单个天线单元分析"><a href="#单个天线单元分析" class="headerlink" title="单个天线单元分析"></a>单个天线单元分析</h3><h3 id="MIMO天线设计"><a href="#MIMO天线设计" class="headerlink" title="MIMO天线设计"></a>MIMO天线设计</h3><h2 id="4-优化设计"><a href="#4-优化设计" class="headerlink" title="4. 优化设计"></a>4. <strong>优化设计</strong></h2><ul>
<li>中心频率优化</li>
<li>隔离度优化</li>
<li>查看天线驻波比</li>
<li>查看天线增益</li>
<li>最终参数</li>
</ul>
<h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. <strong>总结</strong></h2><h2 id="6-参考文献"><a href="#6-参考文献" class="headerlink" title="6. 参考文献"></a>6. <strong>参考文献</strong></h2>]]></content>
      <tags>
        <tag>电磁场</tag>
      </tags>
  </entry>
  <entry>
    <title>射频发射机</title>
    <url>/2024/03/20/%E5%B0%84%E9%A2%91%E5%8F%91%E5%B0%84%E6%9C%BA/</url>
    <content><![CDATA[<p>&emsp;&emsp;在大二时完成的高频课设，现在作为Markdown书写练习发布在博客上，这也算是对大学学习内容进行总结。</p>
<p><strong>摘要</strong>:无线电发射与接收设备在高频电子线路系统中扮演着重要角色，广泛应用于通信、广播、电视、安全防范、遥控遥测、雷达、电子对抗和无线导航领域。随着通信技术的发展，无线电技术的重要性日益凸显。本文选取调频发射机作为课程设计方案，介绍了其工作原理、制作方法、系统组成框图、各部分功能和PCB电路板设计。该发射机可在88-108MHz频段内进行调制，传输距离可达40m以上，可被普通调频收音机或四六级听力耳机接收。<br><strong>关键词：调频发射机、音频信号、调制波、载波</strong></p>
<span id="more"></span>
<h1 id="无线电发射与接收设备设计与实践"><a href="#无线电发射与接收设备设计与实践" class="headerlink" title="无线电发射与接收设备设计与实践"></a>无线电发射与接收设备设计与实践</h1><h2 id="1-设计题目"><a href="#1-设计题目" class="headerlink" title="1. 设计题目"></a>1. 设计题目</h2><ul>
<li>调频（或调幅）发射机设计</li>
</ul>
<h2 id="2-实践目的"><a href="#2-实践目的" class="headerlink" title="2. 实践目的"></a>2. 实践目的</h2><p>&emsp;&emsp;无线电发射与接收设备是高频电子线路的综合应用，是现代化通信系统、广播与电视系统、无线安全防范系统、无线遥控和遥测系统、雷达系统、电子对抗系统、无线电制导系统等，必不可少的设备。本次设计要达到以下目的：</p>
<ul>
<li>进一步认识射频发射与接收系统；</li>
<li>掌握调频（或调幅）无线电发射机的设计；</li>
<li>学习无线电通信系统的设计与调试。</li>
</ul>
<h2 id="3-设计要求"><a href="#3-设计要求" class="headerlink" title="3. 设计要求"></a>3. 设计要求</h2><h3 id="3-1-单元电路"><a href="#3-1-单元电路" class="headerlink" title="3.1 单元电路"></a>3.1 单元电路</h3><ol>
<li>小信号调谐放大器：放大倍数大于20dB，负载为1，中心频率为10.7MHz或465kHz</li>
<li>振荡器：振荡频率在88-108MHz，输出信号幅度约1V，尽可能小失真</li>
<li>丙类功率放大器：电源+12V，工作频率6MHz，负载75，输出功率待填</li>
</ol>
<h3 id="3-2-发射机设计"><a href="#3-2-发射机设计" class="headerlink" title="3.2 发射机设计"></a>3.2 发射机设计</h3><p>&emsp;&emsp;（1）发射机采用FM、AM或者其它的调制方式；<br>&emsp;&emsp;（2）若采用FM调制方式，要求发射频率覆盖范围在88-104MHz，传输距离&gt;20m;<br>&emsp;&emsp;（3）若采用AM调制方式，发射频率为中波波段525－1605KHz或30MHz左右，传输距离&gt;20m；<br>&emsp;&emsp;（4）为了加深对调制系统的认识，发射机建议采用分立元件设计；（采用集成路的设计方法建议作为备选方案；）<br>&emsp;&emsp;（5）已调信号通过AM&#x2F;FM多波段收音机进行接收测试。</p>
<h2 id="4-电路原理"><a href="#4-电路原理" class="headerlink" title="4. 电路原理"></a>4. 电路原理</h2><h3 id="4-1-FM调制原理"><a href="#4-1-FM调制原理" class="headerlink" title="4.1 FM调制原理"></a>4.1 FM调制原理</h3><h4 id="4-1-1-直接调频"><a href="#4-1-1-直接调频" class="headerlink" title="4.1.1 直接调频"></a>4.1.1 直接调频</h4><p>&emsp;&emsp;直接调频的基本原理是利用调制信号直接控制振荡器的振荡频率，使其反映调制信号变化规律。要用调制信号去控制载波振荡器的振荡频率，就是用调制信号去控制决定载波振荡器振荡频率的元件或电路的参数，从而使载波振荡器的瞬时频率按调制信号变化规律线性地改变，就能够实现直接调频。直接调频可用如下方法实现：<br>&emsp;&emsp;<strong>（1）改变振荡回路的元件参数实现调频</strong><br>&emsp;&emsp;在LC振荡器中，决定振荡频率的主要元件是LC振荡回路的电感L和电容C。在RC振荡器中，决定振荡频率的主要元件是电阻和电容。因而，根据调频的特点，用调制信号去控制电感、电容或电阻的数值就能实现调频。调频电路中常用的可控电容元件有变容二极管和电抗管电路。常用的可控电感元件是具有铁氧体磁芯的电感线圈或电抗管电路，而可控电阻元件有二极管和场效应管。<br>&emsp;&emsp;<strong>（2）控制振荡器的工作状态实现调频</strong><br>&emsp;&emsp;在微波发射机中，常用速调管振荡器作为载波振荡器，其振荡频率受控于加在管子反射极上的反射极电压。因此，只需将调制信号加至反射极即可实现调频。若载波是由多谐振荡器产生的方波，则可用调制信号控制积分电容的充放电电流，从而控制其振荡频率。</p>
<h4 id="4-1-2-间接调频"><a href="#4-1-2-间接调频" class="headerlink" title="4.1.2 间接调频"></a>4.1.2 间接调频</h4><p>&emsp;&emsp;如图4-1-1所示，不直接针对载波，而是通过后一级的可控的移相网络。 将uΩ先进行积分而后以此积分值进行调相，即得间接调频。<br>&emsp;&emsp;可控移相网络的实现方法如下图4-1-1所示。将变容二极管接在高频放大器的谐振回路里，就可构成变容二极管调相电路。电路中，由于调制信号的作用使回路谐振频率改变，当载波通过这个回路时由于失谐而产生相移，从而获得调相。</p>
<img src="/2024/03/20/%E5%B0%84%E9%A2%91%E5%8F%91%E5%B0%84%E6%9C%BA/4-1-2-2.png" class title="img">
<center>图4-1-2-2  单级回路变容管调相电路</center>
&emsp;&emsp;采用FM调制的调频发射机其原理框图如下图所示，它由调制器、前置功放、末级功放和直流稳压电源等部分组成。

<img src="/2024/03/20/%E5%B0%84%E9%A2%91%E5%8F%91%E5%B0%84%E6%9C%BA/4-1-3.png" class title="img">

<center>图4-1-3</center>


<h3 id="4-2-方案选择"><a href="#4-2-方案选择" class="headerlink" title="4.2 方案选择"></a>4.2 方案选择</h3><p>&emsp;&emsp;相对于调幅波发射，调频发射机发射的频率带宽更加宽，但在高频段占用了相对较窄的频带，从而具有更远的传输距离和更小的信号失真。在要求传输距离不是很远的情况下，可以采用直接载波调频的方案来设计调频发射机。直接载波调频方案比较简单，并且易于实现，同时能够满足课程设计的技术指标要求。<br>&emsp;&emsp;直接调频可以使用不同的方法来实现。其中比较常见的一种是通过变容二极管直接调频。在这种方法中，我们可以使用VCO来实现变容二极管直接调频。大多数中小功率的调频发射机都采用变容二极管直接调频技术，即在工作于发射载频的LC振荡回路上直接调频，并采用晶体振荡器和锁相环路来稳定中心频率。相对于中频调制和倍频方法，这种方法的电路简单、性能良好、副波少、维修方便，是一种较先进的频率调制方案。<br>&emsp;&emsp;除了变容二极管调频之外，还可以采用三极管直接调频方法来实现调频发射。该方法是将三极管组成共基极高频振荡器，通过改变高频振荡频率来实现频率调制。具体而言，它利用电流对电容的影响实现电容变化，从而实现对频率的调制。相对于变容二极管调频，三极管直接调频电路更加简单，且可以使电路变得非常简洁。<br>&emsp;&emsp;需要注意的是，采用变容二级管调频方法时，对于高频线圈的参数有较苛刻的要求，这可能增加设计电路的难度。因此，在本文中采用三极管直接调制的方法是更为适合的选择，它不仅可以实现FM调频，而且使电路变得非常简洁，具有较好的性能表现。</p>
<h2 id="5-电路设计"><a href="#5-电路设计" class="headerlink" title="5. 电路设计"></a>5. 电路设计</h2><h3 id="5-1-原理图设计"><a href="#5-1-原理图设计" class="headerlink" title="5.1 原理图设计"></a>5.1 原理图设计</h3><h4 id="5-1-1-二级FM发射机"><a href="#5-1-1-二级FM发射机" class="headerlink" title="5.1.1 二级FM发射机"></a>5.1.1 二级FM发射机</h4><p>&emsp;&emsp;该调频发射机的总体设计包括声电转换、音频小信号放大和高频振荡调制等部分。具体而言，驻极体话筒负责声电转换，采集周围环境声波信号后输出相应的电信号。这个信号经过电容C7输入到晶体管Q1，在Q1的作用下进行了音频小信号放大，并且经过C5送到晶体管Q2，进一步进行频率调制。<br>&emsp;&emsp;在高频振荡调制部分，Q2、C3、C6、C8、L1组成共基极高频振荡器，采用电容三点式。在这种方式中，基极与集电极的电压随基极输入的音频信号变化而变化，从而改变高频振荡的频率，最终实现频率调制。需要注意的是，由于高频电路容易受到干扰，为了降低干扰影响，可以选择末级来接入电源。这样，如果接入了来自前级的干扰信号，其影响会被逐渐削弱，以保证整个系统的稳定性。<br>&emsp;&emsp;在设计此类调频发射机时，需要特别注意电路的连接和调试。此外，需要对电路参数进行合理的调整和优化，以确保其性能和稳定性。</p>
<img src="/2024/03/20/%E5%B0%84%E9%A2%91%E5%8F%91%E5%B0%84%E6%9C%BA/5-1-1.png" class title="img">
<center>图5-1-1 二级FM发射机原理图</center>

<img src="/2024/03/20/%E5%B0%84%E9%A2%91%E5%8F%91%E5%B0%84%E6%9C%BA/5-1-2.png" class title="img">
<center>图5-1-2 二级FM发射机实物图</center>

<h4 id="5-1-2-小信号调谐放大器"><a href="#5-1-2-小信号调谐放大器" class="headerlink" title="5.1.2 小信号调谐放大器"></a>5.1.2 小信号调谐放大器</h4><p>&emsp;&emsp;单调谐放大器的原理电路如图2所示，它用LC 并联谐振回路取代放大器的集电极负载电阻，或者与负载电阻并联。当用LC谐振回路作为集电极负载，放大器的外部输入信号频率与LC谐振回路谐振频率相等时，集电极等效负载最大，放大器有最大增益。若输入信号频率增加或减小，均会使回路处于失谐状态，结果使增益下降。电阻R2、Rp4和RP1的分压为晶体管基极提供静态电压，使其工作在放大状态。电阻Rp2和R1提供直流串联电流负反馈，Rp2和R1变大，静态工作点下降，负反馈加重，增益减小。CE为射极旁路电容，C1为耦合电容。电阻R3为集电极电阻，它对回路的Q值、带宽和增益都有决定性影响。带中间抽头的电感L1和电容C5、C4构成谐振回路。</p>
<img src="/2024/03/20/%E5%B0%84%E9%A2%91%E5%8F%91%E5%B0%84%E6%9C%BA/5-1-2-1.png" class title="img">
<center>图5-1-2-1 小信号调谐放大器原理图</center>

<img src="/2024/03/20/%E5%B0%84%E9%A2%91%E5%8F%91%E5%B0%84%E6%9C%BA/5-1-2-2.png" class title="img">
<center>图5-1-2-2 小信号调谐放大器实物图</center>

<img src="/2024/03/20/%E5%B0%84%E9%A2%91%E5%8F%91%E5%B0%84%E6%9C%BA/5-1-2-3.png" class title="img">
<center>图5-1-2-3 小信号调谐放大器仿真结果</center>

<h4 id="5-1-3-高频振荡器"><a href="#5-1-3-高频振荡器" class="headerlink" title="5.1.3 高频振荡器"></a>5.1.3 高频振荡器</h4><p>&emsp;&emsp;单元电路中的振荡器选择用电容三点式振荡器。C18 C16 C15 L4构成电容三点式，R8是偏置电阻为稳定三极管的静态工作点，使其处于放大区，另一个作用就是在交流等效电路中，成正反馈的作用，这是振荡器能起振的关键因素。调节L4或C15微变电容可以调节频率。最初设计打板的振荡器不能成功起振，之后在FM发射机上焊接实现。</p>
<img src="/2024/03/20/%E5%B0%84%E9%A2%91%E5%8F%91%E5%B0%84%E6%9C%BA/5-1-3.png" class title="img">
<center>图5-1-3 高频振荡器</center>

<h4 id="5-1-4-电路优化部分"><a href="#5-1-4-电路优化部分" class="headerlink" title="5.1.4 电路优化部分"></a>5.1.4 电路优化部分</h4><p>&emsp;&emsp;本课程设计中，我在调试过程中发现信号频率在达到90MHz时功率过小。出于解决此问题的考虑，我采取了加入一个额外的功率放大器单元电路来增强输出功率的方法。为了快速解决问题，我用洞洞板临时制作了这个单元电路。<br>&emsp;&emsp;需要注意的是，在实际项目中，使用洞洞板制作电路并不是最优选择，因为这种方法存在接触不良、松动或短路等风险，这可能会影响整个系统的性能和稳定性。因此，在实际项目中还是应该采用专业的电路板进行设计和制造，以保证电路连接的准确性和稳定性。<br>&emsp;&emsp;另外，信号功率过小的情况可能涉及多个因素。例如，可能是输入音频信号幅度太小或电路参数不合适等原因。在加入功率放大器之前，我们应该对电路参数和音频输入信号的幅度进行仔细检查，并尝试通过调整电路参数和音频信号幅度来优化系统性能。但由于时间原因，并没有对此进行调整。</p>
<img src="/2024/03/20/%E5%B0%84%E9%A2%91%E5%8F%91%E5%B0%84%E6%9C%BA/5-1-4-1.png" class title="img">
<center>图5-1-4-1 功率放大器原理图</center>

<img src="/2024/03/20/%E5%B0%84%E9%A2%91%E5%8F%91%E5%B0%84%E6%9C%BA/5-1-4-2.png" class title="img">
<center>图5-1-4-2 功率放大器实物图</center>

<h3 id="5-2-PCB设计"><a href="#5-2-PCB设计" class="headerlink" title="5.2 PCB设计"></a>5.2 PCB设计</h3><p>&emsp;&emsp;出于上次数电课设所剩余的元器件考虑，电容采用贴片1206，电阻采用直插式。在利用原理图进行PCB板布线时，有一些注意事项需要特别考虑，以保证电路的可靠性和稳定性。首先，应该尽可能选择宽布线，在合适的范围内尽可能加大所有焊盘。这可以降低线路阻抗，并且使得信号传输更加稳定。其次，如果需要进行覆铜，应该提前改变线间距规则，并在覆铜完成后将规则改回原数值。因为在覆铜时，会根据规则确定覆铜间距，如果不调整规则，容易导致铜与线之间的距离过小，产生干扰。另外，在制作单面板时，需要注意直插元件的焊点要在与贴片同一面，即元件在另一面。还应当注意通孔的设置，确保通孔的大小和位置在设计中已经考虑到了。最后，在布线时，尽可能将元器件靠近摆放，减少导线长度并降低干扰；同时避免出现直角走线，以免阻碍信号传输。此外，适度加大导线宽度、焊盘直径和铺铜间距，可以提高焊接难度，使焊接更加便捷。</p>
<img src="/2024/03/20/%E5%B0%84%E9%A2%91%E5%8F%91%E5%B0%84%E6%9C%BA/5-2-1.png" class title="img">
<center>图5-2-1 二级FM发射机</center>

<img src="/2024/03/20/%E5%B0%84%E9%A2%91%E5%8F%91%E5%B0%84%E6%9C%BA/5-2-2.png" class title="img">
<center>图5-2-2 小信号调谐放大器</center>

<img src="/2024/03/20/%E5%B0%84%E9%A2%91%E5%8F%91%E5%B0%84%E6%9C%BA/5-2-3.png" class title="img">
<center>图5-2-3 单元电路振荡器（未成功）</center>

<h3 id="5-3-焊接"><a href="#5-3-焊接" class="headerlink" title="5.3 焊接"></a>5.3 焊接</h3><p>&emsp;&emsp;①将元器件按照PCB位置插入对应位置，并注意先焊接比较矮的元器件；<br>&emsp;&emsp;②对电感进行绕制，用漆包线绕十字螺丝刀5到7圈，然后用砂纸磨掉漆上松香和锡助焊，为了增加频率可以拉开线圈之间的距离；<br>&emsp;&emsp;③对天线进行绕制，也用漆包线绕十字螺丝刀14到18圈，焊接处同样需要用砂纸磨掉漆上松香和锡助焊，为了增加传输距离需要拉长天线（但实际效果好像不太明显）。</p>
<h3 id="5-4-调试"><a href="#5-4-调试" class="headerlink" title="5.4 调试"></a>5.4 调试</h3><h4 id="5-4-1-FM发射机"><a href="#5-4-1-FM发射机" class="headerlink" title="5.4.1 FM发射机"></a>5.4.1 FM发射机</h4><p>&emsp;&emsp;高频发射机接入12V的电源，然后用示波器接天线的输出波形及频率，结果发现可以起振且波形良好，但频率只有50Mhz。所以重新绕制电感（减少圈数）且反复地改变反馈电容，波形逐渐稳定到某频率，用四级耳机调频到该频率可以清晰接收到信号，距离约为46m,此时频率为90MHz，达到与所要求的频率范围。但音质较差。后通过调节高频振荡回路上的电感和电容使调制频率减小到75MHz，音质与传输距离均有提升。</p>
<img src="/2024/03/20/%E5%B0%84%E9%A2%91%E5%8F%91%E5%B0%84%E6%9C%BA/5-4-1.png" class title="img">
<center>图5-4-1 发射机调试结果</center>

<table>
<thead>
<tr>
<th>指标名称</th>
<th>指标数值</th>
</tr>
</thead>
<tbody><tr>
<td>发射频率</td>
<td>77MHz</td>
</tr>
<tr>
<td>工作电压</td>
<td>12V</td>
</tr>
<tr>
<td>发射半径</td>
<td>大于50m</td>
</tr>
<tr>
<td>电压峰峰值</td>
<td>198mV</td>
</tr>
<tr>
<td>发射机1级发射极</td>
<td>723mV</td>
</tr>
<tr>
<td>2级发射极</td>
<td>5.3V</td>
</tr>
</tbody></table>
<center>表1  发射频率与电压峰峰值（二级FM发射机）</center>

<table>
<thead>
<tr>
<th>发射频率</th>
<th>电压峰峰值</th>
</tr>
</thead>
<tbody><tr>
<td>77.28MHz</td>
<td>572mV</td>
</tr>
<tr>
<td>89.93MHz</td>
<td>456mV</td>
</tr>
<tr>
<td>92.94MHz</td>
<td>296mV</td>
</tr>
</tbody></table>
<center>表2  发射频率与电压峰峰值（三级FM发射机）</center>
| 发射频率   | 电压峰峰值 |
|------------|-----------|
| 73.86MHz  | 1.24V     |
| 80.53MHz  | 1.02V     |



<h4 id="5-4-2单元电路振荡器"><a href="#5-4-2单元电路振荡器" class="headerlink" title="5.4.2单元电路振荡器"></a>5.4.2单元电路振荡器</h4><p>振荡波形频率达到80MHZ，波形良好。振幅略小于1V</p>
<h4 id="5-4-3-小信号调谐放大器"><a href="#5-4-3-小信号调谐放大器" class="headerlink" title="5.4.3 小信号调谐放大器"></a>5.4.3 小信号调谐放大器</h4><p>小信号发射极5mv，放大倍数达到20db，负载为1K，中心频率为10.7MHZ。波形良好。</p>

<center>图5-3-2 高频小信号放大器</center>


<h2 id="6-实验心得"><a href="#6-实验心得" class="headerlink" title="6. 实验心得"></a>6. 实验心得</h2><p>&emsp;&emsp;通过参加五天的高频课程设计，我深刻认识到了理论知识与实践操作之间的巨大差距。在平常的学习中，我们只能掌握理论知识，但对于如何将其转化为实际可行的操作方案还是感到无从下手。因此，在开始本次课程设计时，我必须先查阅相关资料，并了解如何将每个部分所需的功能转化为实际电路。经过多次尝试和改进，我最终确定了各项方案，并成功地搞清楚了电路的工作原理。<br>&emsp;&emsp;接下来，我按照电路原理图进行仿真和PCB板的设计制作。虽然整个过程充满着挑战和困难，并且出现无法仿真的情况。但我还是耐心地坚持下来。在焊接过程中，电路实际效果与仿真图上仍存在一定差异，这让我花费了更多时间不断调整参数使频率更稳定。在调试过程中，我也遇到了很多麻烦，有些问题我通过自己的努力调试找到了问题并成功解决了。例如频率起初只有50MHz，之后通过调整电容和电感解决。<br>&emsp;&emsp;通过这次实验，我认识到每个环节都非常重要，不能忽视任何一个环节，并时刻保持着认真的态度。例如在布线过程中，我深刻认识到高频电路需要尽可能地避免直角和锐角，尽可能使用圆弧以减少干扰。同时，我也学到了一些关键思想和态度：无论做什么事情，都要踏实做事，一步一个脚印；对于我们通信专业的同学来说，更加注重动手操作和实践经验；认真钻研和自主探究的能力非常重要。<br>&emsp;&emsp;总而言之，五天的高频课程设计让我受益匪浅，不仅掌握了更多的知识和技能，还培养了重要的思想和态度，这将对我的未来学习和工作带来巨大的影响。</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol>
<li>曾兴雯、刘乃安、陈健、付卫红，高频电路原理与分析（第六版），西安电子科技大学出版社，2017.2</li>
<li>华成英，模拟电子技术基本教程，清华大学出版社，2006.2</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>数据采集终端的设计</title>
    <url>/2024/05/07/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E7%BB%88%E7%AB%AF%E7%9A%84%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<p>摘要：本论文基于AT89S52单片机，设计了一个数据采集终端控制器，旨在巩固《微机原理及接口技术》课程所学理论知识，并初步了解单片机应用系统设计与调试方法。硬件设计采用了AT89S51处理芯片和8255A接口芯片，实现了数码管显示、矩阵键盘输入、温度采集和串口通信等功能。软件设计包括开机自检、温度数据采集、时间和日期显示、温度报警、键盘操作和上下位机通信等功能。通过详细的硬件原理图设计和软件功能实现，本论文提供了一个完整的数据采集终端控制器方案。</p>
<span id="more"></span>
<h1 id="数据采集终端的设计"><a href="#数据采集终端的设计" class="headerlink" title="数据采集终端的设计"></a>数据采集终端的设计</h1><h2 id="1设计目的"><a href="#1设计目的" class="headerlink" title="1设计目的"></a>1设计目的</h2><p>&emsp;&emsp;通过单片机应用产品的设计与调试过程，巩固《微机原理及接口技术》课程所学理论知识，初步了解单片机应用系统设计与调试的方法。</p>
<h2 id="2设计任务"><a href="#2设计任务" class="headerlink" title="2设计任务"></a>2设计任务</h2><p>&emsp;&emsp;设计一个以AT89S52单片机为核心的数据采集终端控制器。<br>&emsp;&emsp;1. 设计硬件系统原理图（最好采用最小系统，不要扩展8255）。硬件组成，以AT89S52单片机为核心，系统有8位数码管显示器、指示灯、蜂鸣器等用于时间、数据显示和告警等输出；44矩阵键盘（含数字键0～9及功能键）或独立式按键用于切换显示内容、调整参数等操作；串行接口用于单片机与上位机（PC机）的通信；A&#x2F;D转换接口（ADC0809）实现对2路（及以上）温度的检测，设选用的线性温度传感变送器将检测的-20℃<del>+65℃温度变换为0</del>5V电压信号，经ADC0809转换后变换为温度。<br>&emsp;&emsp;2．在硬件基础上，设计软件实现下列功能，并在实验板上模拟调试实现控制器的功能。<br>&emsp;&emsp;（1）开机自检，检查相关接口及数码管显示器、指示灯、蜂鸣器等外设是否正常，消除窜显和显示亮度不均匀。<br>&emsp;&emsp;（2）以一定的时间间隔采集温度数据，并通过标度变换转换为实际的温度值（整数或含小数）。对数字量有合适的数字滤波方式保证数据稳定（选做）。<br>&emsp;&emsp;（3）平时数码管以一定的时间间隔交替显示时间、日期（2000~2099年，选做）、温度，显示格式自己定义（如显示温度时包括温度值、温度单位“℃”，温度值可以只有整数或小数点后1位）。<br>&emsp;&emsp;（4）具有温度报警功能，当温度超出设定范围（太低或太高）可以通过蜂鸣器、指示灯报警，数码管显示相应通道。<br>&emsp;&emsp;（5）通过键盘切换显示内容、调整时间、设置报警参数（选做）。设定参数过程有合适的方式指示当前可修改的内容。对开关量输入进行软件消抖动处理，参数的设定有检错处理，如：小时不能超过23，日期中每月最大天数、闰年等。按键按下时回馈短促的按键音（选做）。参数设定过程中，较长时间无操作，则自动恢复为正常显示方式（选做）。<br>&emsp;&emsp;（6）设计合理的协议，实现下位机与上位机的通信：下位机定时传输数据、超限报警时发送紧急信息、上位机随时要求下位机传输数据等操作。上位机可以用串口调试工具直接发送数据和接收数据。上位机也可以用相应软件设计数据接收与发送界面（选做）。</p>
<h1 id="3硬件设计"><a href="#3硬件设计" class="headerlink" title="3硬件设计"></a>3硬件设计</h1><h2 id="3-1硬件方案选择"><a href="#3-1硬件方案选择" class="headerlink" title="3.1硬件方案选择"></a>3.1硬件方案选择</h2><p>&emsp;&emsp;本次课程设计基于实验室提供的实验板开发，硬件部分采用了统一的方案。具体方案包括使用89S51处理芯片和8255A（U3）接口芯片，将数据显示在八位数码管上。PA端口用于控制数码管的字段码输出，PB端口用于控制字位码输出，PC端口用于控制矩阵键盘的电平检测。此外，单片机的P3.2引脚外接有源蜂鸣器，用于实现超限报警和按键提示音功能。实验板如下图所示</p>
<img src="/2024/05/07/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E7%BB%88%E7%AB%AF%E7%9A%84%E8%AE%BE%E8%AE%A1/3-1-1.png" class title="img">
<center>图3-1-1 硬件实验板图</center>


<p>&emsp;&emsp;它是一种可编程通用并行接口芯片，它有24条可编程的I&#x2F;0引脚，采用40脚双列直插式封装，单一+5V电源，全部输入&#x2F;输出均与TTL电平兼容。在8255A中有A、B、C三个并行输入&#x2F;输出端口，其功能全部由程序设定，每个端口都有自己的特点。A口、B口通常作为独立的I&#x2F;0端口使用，C口也可以作为一般的I&#x2F;0端口使用，但当A口、B口作为应答式的I&#x2F;O端口使用时，C口分别以来为A口、B口提供应答控制信号。采用8255A作为计时时钟的输入&#x2F;输出接口，8255A的三个端口设置如下:A口工作与方式0，作为输出口，驱动显示字段码，B口工作与方式0，作为输出口，驱动显示字位码，作为位选线;C口输入控制。</p>
<h3 id="3-2主要芯片端口分配"><a href="#3-2主要芯片端口分配" class="headerlink" title="3.2主要芯片端口分配"></a>3.2主要芯片端口分配</h3><p>（1）AT89S51的资源分配</p>
<table>
<thead>
<tr>
<th align="center">端口</th>
<th align="center">配置说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">P0</td>
<td align="center">数据总线和地址总线</td>
</tr>
<tr>
<td align="center">P1</td>
<td align="center">L0~L7（LED灯）</td>
</tr>
<tr>
<td align="center">P2</td>
<td align="center">P2.0（8255-U3片选端）</td>
</tr>
<tr>
<td align="center">P3</td>
<td align="center">P3.2有源蜂鸣器</td>
</tr>
<tr>
<td align="center">其他</td>
<td align="center">电源端口、片选端口、接地、晶振、读写端口</td>
</tr>
</tbody></table>
<p>（2）8255-U3的资源分配</p>
<table>
<thead>
<tr>
<th align="center">端口</th>
<th align="center">配置说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">PA</td>
<td align="center">输出数码管八个“字段码”</td>
</tr>
<tr>
<td align="center">PB</td>
<td align="center">输出数码管八个“字位码”</td>
</tr>
<tr>
<td align="center">PC</td>
<td align="center">矩阵按键</td>
</tr>
</tbody></table>
<h3 id="3-2硬件资源具体分配"><a href="#3-2硬件资源具体分配" class="headerlink" title="3.2硬件资源具体分配"></a>3.2硬件资源具体分配</h3><table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">数码管</td>
<td align="center">时钟、日期与温度的数据显示</td>
</tr>
<tr>
<td align="center">K0</td>
<td align="center">数字7&#x2F;年份加1&#x2F;报警参数加1</td>
</tr>
<tr>
<td align="center">K1</td>
<td align="center">数字8&#x2F;月份加1&#x2F;报警参数减1</td>
</tr>
<tr>
<td align="center">K2</td>
<td align="center">数字9&#x2F;天数加1</td>
</tr>
<tr>
<td align="center">K3</td>
<td align="center">定时滚动显示模式</td>
</tr>
<tr>
<td align="center">K4</td>
<td align="center">数字4&#x2F;年份减1</td>
</tr>
<tr>
<td align="center">K5</td>
<td align="center">数字5&#x2F;月份减1</td>
</tr>
<tr>
<td align="center">K6</td>
<td align="center">数字6&#x2F;天数减1</td>
</tr>
<tr>
<td align="center">K8</td>
<td align="center">数字1</td>
</tr>
<tr>
<td align="center">K9</td>
<td align="center">数字2</td>
</tr>
<tr>
<td align="center">K10</td>
<td align="center">数字3</td>
</tr>
<tr>
<td align="center">K13</td>
<td align="center">数字0</td>
</tr>
<tr>
<td align="center">K11</td>
<td align="center">设置温度报警参数</td>
</tr>
<tr>
<td align="center">K12</td>
<td align="center">进入设置时间状态</td>
</tr>
<tr>
<td align="center">K14</td>
<td align="center">进入设置时间状态</td>
</tr>
<tr>
<td align="center">K15</td>
<td align="center">退出设置状态，正常显示状态下切换时间&#x2F;年月日显示</td>
</tr>
<tr>
<td align="center">L0</td>
<td align="center">自检完成指示灯</td>
</tr>
<tr>
<td align="center">L5</td>
<td align="center">时间设置状态指示灯</td>
</tr>
<tr>
<td align="center">L6</td>
<td align="center">日期设置状态指示灯</td>
</tr>
<tr>
<td align="center">L7</td>
<td align="center">温度超限警报指示灯</td>
</tr>
</tbody></table>
<h3 id="3-3电路原理图"><a href="#3-3电路原理图" class="headerlink" title="3.3电路原理图"></a>3.3电路原理图</h3><img src="/2024/05/07/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E7%BB%88%E7%AB%AF%E7%9A%84%E8%AE%BE%E8%AE%A1/3-3-1.png" class title="img">
<center>图3-3-1 最小系统板原理图</center>

<img src="/2024/05/07/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E7%BB%88%E7%AB%AF%E7%9A%84%E8%AE%BE%E8%AE%A1/3-3-2.png" class title="img">
<center>图3-3-2 实验板仿真原理图</center>

<h3 id="3-4部分硬件电路说明"><a href="#3-4部分硬件电路说明" class="headerlink" title="3.4部分硬件电路说明"></a>3.4部分硬件电路说明</h3><h4 id="3-4-1-数码管显示模块及方案选择"><a href="#3-4-1-数码管显示模块及方案选择" class="headerlink" title="3.4.1 数码管显示模块及方案选择"></a>3.4.1 数码管显示模块及方案选择</h4><p>&emsp;&emsp;静态驱动:数码管公共端接地，每一位数码管的八个段都有八个端口来驱动显示，编程方式简单，而且数码管的显示亮度高，但占用端口多。硬件电路复杂。</p>
<p>&emsp;&emsp;动态驱动:数码关公共端由一个端口控制来选择要显示的位，把数码管的各位的八个段对应并联由一个端口来驱动显示。占用IO端口少，编程繁琐。硬件电路简单。</p>
<p>&emsp;&emsp;方案选择:由于实验板IO端口数有限，为了节省端口，利于系统硬件的资源分配，故数码管显示用动态驱动方式。8255芯片用来扩展端口，将单片机的P0端口与8255的D7~D0三态双向数据线相连，以此来控制8255的PA、PB和PC端口。74HC240是双线八路反相缓冲器&#x2F;线路驱动器，具有三态输出。该三态输出由输出使能端1OE和2OE控制。任意nOE上的高电平将使输出端呈现高阻态。在本电路中，PA端口通过两个74HC240三态缓冲器与数码管的显示位相连。而PB端口则通过两个74HC240与数码管的段码位相连。</p>
<img src="/2024/05/07/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E7%BB%88%E7%AB%AF%E7%9A%84%E8%AE%BE%E8%AE%A1/3-4-1.png" class title="img">
<center>图3-4-1 数码管电路</center>

<h4 id="3-4-2矩阵键盘模块"><a href="#3-4-2矩阵键盘模块" class="headerlink" title="3.4.2矩阵键盘模块"></a>3.4.2矩阵键盘模块</h4><p>&emsp;&emsp;矩阵键盘本质是使用8个io口来进行16个按键的控制读取，可以减小io口的使用，用4条I&#x2F;O线作为行线，4条I&#x2F;O线作为列线组成的键盘。行线和列线是矩阵键盘模块中用于连接按键和控制器的导线。它们以交叉方式排列，形成了一个行和列的矩阵结构。行线通常连接到按键的一个触点上，而列线则连接到另一个触点上。在行线和列线的每个交叉点上，设置一个按键。而这样的按键中按键的个数是4 X 4个。</p>
<img src="/2024/05/07/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E7%BB%88%E7%AB%AF%E7%9A%84%E8%AE%BE%E8%AE%A1/3-4-2.png" class title="img">
<center>图3-4-2 4x4矩阵键盘</center>



<h4 id="3-4-3-ADC0809模数转换模块"><a href="#3-4-3-ADC0809模数转换模块" class="headerlink" title="3.4.3 ADC0809模数转换模块"></a>3.4.3 ADC0809模数转换模块</h4><p>&emsp;&emsp;ADC0809是带有8位A&#x2F;D转换器、8路多路开关以及微处理机兼容的控制逻辑的CMOS组件。它是逐次逼近式A&#x2F;D转换器，可以和单片机直接接口。存在一个8路模拟开关、一个地址锁存与译码器、一个A&#x2F;D转换器和一个三态输出锁存器组成。多路开关可选通8个模拟通道，允许8路模拟量分时输入，共用 A&#x2F;D转换器进行转换。三态输出锁器用于锁存 A&#x2F;D 转换完的数字量，当OE端为高电平时，才可以从三态输出锁存器取走转换完的数据。ALE 为地址锁存允许输入线，高电平有效。当 ALE 线为高电平时，地址锁存与译码器将A，B，C三条地址线的地址信号进行锁存，经译码后被选中的通道的模拟量进入转换器进行转换。A，B和C为地址输入线，用于选通 IN0－IN7 上的一路模拟量输入。本电路仅连接IN0与IN1。</p>
<img src="/2024/05/07/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E7%BB%88%E7%AB%AF%E7%9A%84%E8%AE%BE%E8%AE%A1/3-4-3.png" class title="img">
<center>图3-4-3 ADC0809</center>


<h2 id="4软件设计"><a href="#4软件设计" class="headerlink" title="4软件设计"></a>4软件设计</h2><p>&emsp;&emsp;数据采集终端的控制程序，根据作用划分为自检和总初始化，定时器中断服务子程序，控制程序主体四大部分;其中控制程序分为界面显示部分，操作键盘部分，温度检测部分，串口通信部分。</p>
<h3 id="4-1设计思路"><a href="#4-1设计思路" class="headerlink" title="4.1设计思路"></a>4.1设计思路</h3><p>&emsp;&emsp;首先编写开机自检程序。在系统上电后，检查相关接口及外设：数码管显示器、指示灯和蜂鸣器是否正常工作并向上位机发送通知，表示单片机自检完毕。然后先将时钟显示部分代码编写完成，再编写年月日显示部分代码，注意闰年与每一个月份的判断，再将其整合成正常显示部分。接下来处理温度采集。调用AD0()和AD1()函数分别进行数据的采集。通过这些函数读取温度传感器所连接的模拟输入端口，并将温度数据转换为数字值。编写一个与定时器0相关的标志位，选择四者者其一在正常显示时进行轮流显示。接着编写设置时间时闪烁的子程序，因为要进行检错所以不能将数据直接存至显示的存储单元，因此还需要设置暂存单元，以及选择位数的单元，同时编写矩阵按键的功能，判断每个摁键摁下的框架写完之后再往里面添加每个按键摁下时要执行的功能。定时器0用于正常显示时的时间计时，定时器1用于串口通信。</p>
<h4 id="4-1-1总框图流程说明"><a href="#4-1-1总框图流程说明" class="headerlink" title="4.1.1总框图流程说明"></a>4.1.1总框图流程说明</h4><img src="/2024/05/07/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E7%BB%88%E7%AB%AF%E7%9A%84%E8%AE%BE%E8%AE%A1/4-1-1.png" class title="img">
<center>图4-1-1 程序总流程图</center>


<h4 id="4-1-2主工作流程"><a href="#4-1-2主工作流程" class="headerlink" title="4.1.2主工作流程"></a>4.1.2主工作流程</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Delay(<span class="number">60</span>);                      <span class="comment">//等待各芯片退出复位状态</span></span><br><span class="line">    IO_Init();                      <span class="comment">//调用---   I/O初始化   ---子程序</span></span><br><span class="line">    test();                         <span class="comment">//调用---  开机自检程序 ---子程序</span></span><br><span class="line">    Timer_Init();                   <span class="comment">//调用---  定时器初始化 ---子程序</span></span><br><span class="line">    sendstring(<span class="string">&quot;hello！\r\n&quot;</span>);      <span class="comment">//通知上位机单片机自检完毕</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)                        <span class="comment">//进入循环</span></span><br><span class="line">    &#123;</span><br><span class="line">        AD0();                      <span class="comment">//调用---  采集ad0数据 ---子程序</span></span><br><span class="line">        AD1();                      <span class="comment">//调用---  采集ad1数据 ---子程序</span></span><br><span class="line">        Show_control();             <span class="comment">//调用---  显示模式切换 ---子程序</span></span><br><span class="line">        Disp_8bit();                <span class="comment">//调用---   数码管亮灯  ---子程序</span></span><br><span class="line">        mode_switch_time();         <span class="comment">//调用---  定时切换时间 ---子程序</span></span><br><span class="line">        Time_time();                <span class="comment">//调用---  更新时间日期 ---子程序</span></span><br><span class="line">        beez_time();</span><br><span class="line">        Da_conversion();    </span><br><span class="line">        V_key_scan();               <span class="comment">//矩阵键盘扫描、滤波</span></span><br><span class="line">        V_key_function();           <span class="comment">//矩阵键盘键功能处理    </span></span><br><span class="line">        sendzip();                  <span class="comment">//调用---  传输采集数据 ---子程序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2局部程序设计说明"><a href="#4-2局部程序设计说明" class="headerlink" title="4.2局部程序设计说明"></a>4.2局部程序设计说明</h3><h4 id="4-2-1总初始化和自检"><a href="#4-2-1总初始化和自检" class="headerlink" title="4.2.1总初始化和自检"></a>4.2.1总初始化和自检</h4><p>图4-2-1 自检程序流程图<br>&emsp;&emsp;方案：<br>&emsp;&emsp;通过延时驱动L0<del>L7闪烁，八位数码管八段全亮，驱动蜂鸣器鸣叫0.5S。对U3进行设置，配置端口工作方式，将A口设置为输出（用于驱动数码管字段），B口设置为输出（用于驱动数码管字位），C口设置为输入（用于键盘行列线）。对U3的A口写入字段码，对U3的B口写入字位码，驱动数码管的字位码八位全点亮。对P1口输入0x00，驱动L0</del>L7点亮。将P3.2置为0，驱动蜂鸣器鸣叫，并延时1秒后将其置为1。设置定时器的工作方式，并开启定时器中断使能。按顺序对芯片进行配置。最后，程序进入一个无限循环，执行正常工作逻辑。</p>
<h4 id="4-2-2定时器中断服务子程序"><a href="#4-2-2定时器中断服务子程序" class="headerlink" title="4.2.2定时器中断服务子程序"></a>4.2.2定时器中断服务子程序</h4><img src="/2024/05/07/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E7%BB%88%E7%AB%AF%E7%9A%84%E8%AE%BE%E8%AE%A1/4-2-2.png" class title="img">
<center>图4-2-2 定时器0中断服务流程图</center>


<p>（1）时间&#x2F;日期更新程序</p>
<p>图4-2-3 时间&#x2F;日期更新程序流程图<br>&emsp;&emsp;方案：<br>&emsp;&emsp;根据定时器的工作模式和配置，计算每次产生定时中断所经过的时间。利用计数的方式来确定时钟的走时。引入一个基础计数变量count，用于计算中断产生的次数。该计数变量会在每次定时器中断发生时进行加一操作，并根据设定的初值判断是否满一秒。当满一秒时，清零该计数变量并使后一级的秒变量加一，从而更新时钟的时、分、秒、年、月、日等时间信息。<br>&emsp;&emsp;闰年判断：<br>&emsp;&emsp;①能直接被4整除且不能被100整除的是闰年；<br>&emsp;&emsp;②能直接被400整除的是闰年。</p>
<h4 id="4-2-3控制程序主体"><a href="#4-2-3控制程序主体" class="headerlink" title="4.2.3控制程序主体"></a>4.2.3控制程序主体</h4><h5 id="4-2-3-1界面显示部分"><a href="#4-2-3-1界面显示部分" class="headerlink" title="4.2.3.1界面显示部分"></a>4.2.3.1界面显示部分</h5><p>&emsp;&emsp;（1）拆字功能<br>&emsp;&emsp;方案：<br>&emsp;&emsp;分别为显示日期、显示时间和显示温度功能写了三个拆字模块的函数，通过显示标识位判断在主流程判断调用哪个拆字子函数。对于日期显示，我在函数中进行查表，并添加0到9的数据查询。在存储数字之前，将相应的显示单元的数据加上18，以指向带小数点的显示字符。这样可以实现日期的20XX.XX.XX格式显示。类似地，我为时间显示编写另一个函数来实现拆字功能。在该函数中，首先存储”-“字符在表格中的数据，并进行一次移位和移数据操作。然后，按照正常的拆字方式将时间的高低四位存储到相应的显示单元中。这样可以实现带有”-“符号的时间显示。温度显示部分同上。<br>&emsp;&emsp;（2）定时切换显示子程序</p>
<img src="/2024/05/07/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E7%BB%88%E7%AB%AF%E7%9A%84%E8%AE%BE%E8%AE%A1/4-2-4.png" class title="img">
<center>图4-2-4 动态显示切换流程图</center>

<p>&emsp;&emsp;方案：<br>&emsp;&emsp;首先预设一个标识位用于年月日、时间和温度界面显示的切换，根据定时器中断触发，修改标识位的数据来实现显示的切换。并且可以根据需要设置不同的时间间隔本文程序采用每隔5s切换一次。<br>&emsp;&emsp;（3）闪烁功能实现<br>&emsp;&emsp;方案：<br>&emsp;&emsp;使用定时器0配置为方式1，即16位工作模式。在中断服务子程序中，根据需要的闪烁时间间隔，修改闪烁标志位的状态。在设置时间、日期和温度时根据读取到的位数，将指向的位数对应的显示数组里面的数据，与空格数据互相交替，并经过定时器0的固定时间，造成视觉上闪烁的观感。<br>&emsp;&emsp;（4）输入检错功能</p>
<img src="/2024/05/07/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E7%BB%88%E7%AB%AF%E7%9A%84%E8%AE%BE%E8%AE%A1/4-2-5.png" class title="img">
<center>图4-2-5 输入检错流程图</center>

<p>&emsp;&emsp;方案：<br>&emsp;&emsp;设置时间时，当输入的数据不符合规范时，则判定为无效操作。例如在输入26小时的时候，即使摁下6也无法对其个位赋值。只有在十位为1或0时，摁下6号键才是有效的；设置日期时，若原始数值为2024年2月29日，此时增加年份为2025年，则会调用日期检错函数，使其自动变为2025年2月28日，并无法将其增加至29日，即校准了日期。</p>
<h5 id="4-2-3-2键盘操作部分"><a href="#4-2-3-2键盘操作部分" class="headerlink" title="4.2.3.2键盘操作部分"></a>4.2.3.2键盘操作部分</h5><p>&emsp;&emsp;（1）按键消抖<br>&emsp;&emsp;方案：<br>&emsp;&emsp;使用滚动存储的方式而非采用延时消抖的方法，避免了对CPU资源的浪费，以及导致显示时候的窜显。预设几个存储单元与两个关键的旧态新态单元，利用主流程的时间消耗，当之前的几个存储单元逐个赋值至全部相等后，代表按键的机械抖动已经消除，，此时再将当前按键状态存入新态存储单元，与按键旧态单元即可形成键值电平的判断，对按键摁下动作进行选择。<br>&emsp;&emsp;（2）键盘扫描子程序<br>&emsp;&emsp;方案：<br>&emsp;&emsp;为了实现只有在按键摁下的时候才能执行相应的功能，因此需要模拟它的电平变化。按键的摁下实际上是一个下降沿的状态，从没有摁下的高电平转为被摁下后的低电平，因此先判断滚存单元旧态是否是没被摁下的电平状态，再判断该按键是否是被摁下后的电平状态，逐个执行下来就能确定是否有按键进行了被摁下的动作。</p>
<h5 id="4-2-3-3温度检测部分"><a href="#4-2-3-3温度检测部分" class="headerlink" title="4.2.3.3温度检测部分"></a>4.2.3.3温度检测部分</h5><p>&emsp;&emsp;（1）温度采集子程序<br>&emsp;&emsp;方案：<br>&emsp;&emsp;使用可调电位器来模拟温度输入。通过调节电位器的旋钮来改变电压值，模拟不同的温度值。确保可调电位器的范围能够覆盖目标温度范围，在本方案中为-20℃至65℃。先由模数转换芯片ADC0809将模拟量转换成0-255的数字量再通过计算将其范围限定在-20~65，通过控制数码管显示该值。<br>数字量和温度对应关系如下：</p>
<p>A0:被测参数起点<br>Am:被测参数最大值<br>Dm:数字量最大值<br>Dx:实测数字量<br>&emsp;&emsp;本考虑采用中值滤波的数据滤波方式提高系统的稳定性和准确性，但最后实现效果并不理想，故放弃。<br>&emsp;&emsp;（2）设定温度报警阈值</p>
<img src="/2024/05/07/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E7%BB%88%E7%AB%AF%E7%9A%84%E8%AE%BE%E8%AE%A1/4-2-6.png" class title="img">
<center>图4-2-6 设置温度阈值流程图</center>


<p>&emsp;&emsp;方案：<br>&emsp;&emsp;预设一个存储变量（初始值为上限35℃），作为阈值与两个温度通道采集到的数值比较的单元变量，在设置温度报警参数界面将上限参数存入这个变量，保存数据并返回正常显示界面后温度采集子程序不断对是否超出范围是否进行判断，超出后置零蜂鸣器和LED灯进行报警。<br>&emsp;&emsp;（3）声光报警功能的实现<br>方案：</p>
<img src="/2024/05/07/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E7%BB%88%E7%AB%AF%E7%9A%84%E8%AE%BE%E8%AE%A1/4-2-7.png" class title="img">
<center>图4-2-7 声光报警功能流程图</center>

<p>&emsp;&emsp;通过定时器中断来驱动整个流程。预设一个beez_flag_time变量，在每次中断触发时，beez_flag_time自加1。当超过200时置零。因此可以使用beez_flag_time变量来控制蜂鸣器和LED灯的开关状态，并通过判断beez_flag_time是否超过50来确定何时开启和关闭它们。当温度超出阈值时，led灯将以0.5s的间隔闪烁，同时蜂鸣器也以此频率鸣叫报警。</p>
<h4 id="4-2-4串口通信"><a href="#4-2-4串口通信" class="headerlink" title="4.2.4串口通信"></a>4.2.4串口通信</h4><p>&emsp;&emsp;方案：<br>&emsp;&emsp;printf函数使用putchar函数构建一个字符串并写入输出流。fmtstr是一个格式参数，可以由字符，转义序列和格式字符串组成。printf函数在格式化输出时，向下调用了char putchar(char c);这个函数，在“stdio.h”里可以发现有这个函数，所以我们需要自己构造一个这样的函数，即通过串口putchar()。<br>&emsp;&emsp;值得注意的是keil C51中使用printf打印uchar类形的整数的时候，正确的打印控制符是：%bx,%bu。编写一个发送函数，用于将字符串通过串口发送出去。定义一个名为sendbyte()的函数。在函数内部，使用循环逐个字符地发送字符串中的每个字符，直到遇到字符串结束符\0为止。发送字符的方法可以是通过写入UART数据寄存器来实现。</p>
<h2 id="5系统功能与操作说明"><a href="#5系统功能与操作说明" class="headerlink" title="5系统功能与操作说明"></a>5系统功能与操作说明</h2><p>&emsp;&emsp;系统启动时进入自检，然后进入时钟模式，过5s轮流显示年月日、AD0温度和AD1温度，摁下K7键可以立刻切换，摁K12进入时钟修改界面，K0<del>K10与K13对应选择可修改数据的赋值。摁K14进入日期修改界面。K0</del>K6对应选择修改年、月、日三位数据。摁#退出修改模式并保存相应设置。系统运行过程中温度超出限值时蜂鸣器发出响声、指示灯闪烁。可在串口助手中查看收集到的温度数据。<br>5.1键盘操作界面</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">K0</td>
<td align="center">K1</td>
<td align="center">K2</td>
<td align="center">K3</td>
</tr>
<tr>
<td align="center">滚动模式</td>
<td align="center">滚动模式</td>
<td align="center">滚动模式</td>
<td align="center">滚动模式</td>
</tr>
<tr>
<td align="center">K4</td>
<td align="center">K5</td>
<td align="center">K6</td>
<td align="center">K7</td>
</tr>
<tr>
<td align="center">固定模式</td>
<td align="center">固定模式</td>
<td align="center">固定模式</td>
<td align="center">固定模式</td>
</tr>
<tr>
<td align="center">K8</td>
<td align="center">K9</td>
<td align="center">K10</td>
<td align="center">K11</td>
</tr>
<tr>
<td align="center">报警参数</td>
<td align="center">报警参数</td>
<td align="center">报警参数</td>
<td align="center">报警参数</td>
</tr>
<tr>
<td align="center">K12</td>
<td align="center">K13</td>
<td align="center">K14</td>
<td align="center">K15</td>
</tr>
<tr>
<td align="center">设置时间</td>
<td align="center">设置日期</td>
<td align="center">设置时间</td>
<td align="center">设置日期</td>
</tr>
</tbody></table>
<p>图5-1-1 主键盘按键定义</p>
<p>图5-1-2 日期设置模式下的按键定义</p>
<p>图5-1-3 时间设置模式下的按键定义</p>
<p>图5-1-4 设置温度报警参数模式下的按键定义<br>5.2数码管显示界面及显示格式说明</p>
<img src="/2024/05/07/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E7%BB%88%E7%AB%AF%E7%9A%84%E8%AE%BE%E8%AE%A1/5-2-1.png" class title="img">
<center>图5-2-1 数码管显示界面</center>

<p>&emsp;&emsp;（1）时间显示：12-30-02		12时-30分-02秒<br>&emsp;&emsp;（2）日期显示：2024.2.25 		2024年02月25日<br>&emsp;&emsp;（3）温度显示：A0 35.2℃		通道0温度检测为35.2摄氏度<br>&emsp;&emsp;（4）温度显示：A1 -5.6℃		通道1温度检测为-5.6摄氏度</p>
<h3 id="5-3LED显示说明"><a href="#5-3LED显示说明" class="headerlink" title="5.3LED显示说明"></a>5.3LED显示说明</h3><p>&emsp;&emsp;（1）L0：开机自检完成后常量<br>&emsp;&emsp;（2）L5：进入时间设置模式时常量，退出时关闭<br>&emsp;&emsp;（3）L6：进入日期设置模式时常量，退出时关闭<br>&emsp;&emsp;（4）L7：温度超限报警</p>
<h3 id="5-4操作说明"><a href="#5-4操作说明" class="headerlink" title="5.4操作说明"></a>5.4操作说明</h3><p>&emsp;&emsp;（1）时钟调校：开机完成自检后，按下K12进入时钟调校界面，数码管闪烁的数字为可调整部分。通过输入数字键可以修改当前时钟的时、分、秒。按下确定键则保存当前修改设置后返回基本界面，若所设时间超值，则判定为无效操作。长时间无操作则会自动返回显示模块。本文为20s。<br>&emsp;&emsp;（2）日期设置：开机完成自检后，按下K14进入时钟调校界面，按下K0<del>K3可以分别增加年、月、日数值；按下K4</del>K6可以减少年、月、日数值。按下确定键则保存当前修改设置后返回基本界面。<br>&emsp;&emsp;（3）温度采集和处理：控制器系统会定时采集温度数据，并可以在显示界面中显示实际温度值。<br>&emsp;&emsp;（4）超限报警：本系统具有温度报警功能，用于监测温度是否超出设定范围。调整电位器0或电位器1使其数值超过上下限时，蜂鸣器会发出警报声，指示灯会亮起，同时数码管会显示相应通道的报警信息。并且上位机会接收到“ERROR！—ADX”警报字样。调整回正常温度时退出报警模式。<br>&emsp;&emsp;（5）数据记录：单片机会定时将温度和时间数据发送给上位机。上位机可以使用串口调试工具或相应软件接收并处理来自控制器系统的温度和时间数据。</p>
<img src="/2024/05/07/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E7%BB%88%E7%AB%AF%E7%9A%84%E8%AE%BE%E8%AE%A1/5-4-1.png" class title="img">
<center>图5-4-1 上位机接收系统采集的温度数据与警报</center>

<h2 id="6调试记录"><a href="#6调试记录" class="headerlink" title="6调试记录"></a>6调试记录</h2><p>&emsp;&emsp;1、对各个端口进行总初始化，并编写开机自检程序。以流水灯模式检测数码管显示器、指示灯是否正常。同时，开启蜂鸣器。<br>&emsp;&emsp;2、分别编写正常模式下的时钟与日期的显示模式，时钟添加“—”符号，日期添加“.”，同时网上查询年月日计算日期的公式，完成日期对闰年以及每个月份对应天数的判断。<br>&emsp;&emsp;3、增加数据检错部分，在修改其他数据时候对整体数据进行判断，若不符规则就强制修正。在编写完日期代码后先加快增加速度每0.5s天数加一观察2月份以及其它月份天数的增加是否正常，无误后增加标志位判断显示那种模式的数据<br>&emsp;&emsp;4、添加滚动显示模式，在中断程序中新增变量，并在1000（即5秒）范围内自增，定时改变标志位判断显示那种模式的数据从而达到数码管以一定的时间间隔交替显示时间日期的效果。<br>&emsp;&emsp;5、编写采集温度数据程序。根据公式将电压值转换成-20~65℃。并自定义温度的上下限，当超出范围后调用L0与蜂鸣器进行警告。由于蜂鸣器常鸣影响数码管显示的稳定性，因此再次在中断函数里新增变量使其隔0.5s间断警报。然后对显示模式的变量持续清空，使温度超限后数码管固定显示在温度模式，不再滚动显示直到调整至正常值。<br>&emsp;&emsp;6、添加矩阵按键功能，通过按键选择修改日期与时间。<br>优化键盘，将设置时间的部分修改为数字键盘。<br>&emsp;&emsp;7、根据题目要求对代码进行完善，例如完成一次时间修改后就无法再次进入时间设置模式，AD0超限报警时声音过小等等小问题，使代码更加的合理。</p>
<h2 id="7课程设计总结"><a href="#7课程设计总结" class="headerlink" title="7课程设计总结"></a>7课程设计总结</h2><p>&emsp;&emsp;经过了两个星期的课程设计，我受益颇丰，它帮助我巩固了对之前c语言的学习与理解，网上资料的查询也让我提高了自己动手的能力。相较于之前的实验课来说，课程设计的难度相当于拔高了好几个档次，但它带给我的好处却是诸多的，之前在学习单片机的时候，一次代码量一般都不超过一百行，真正逻辑处理的部分更是少之又少。而这次的课程设计却让我学会了整体的统筹规划。<br>&emsp;&emsp;学习该门课程知识时，其思维方法也和其它课程不同，该课程偏重于工程思维，具体地说，在了解了微处理器各种芯片的功能和外部特性以后，剩下的是如何将它们用于实际系统中，其创造性劳动在于如何用计算机的有关技术和各种芯片，设计实用的电路和系统，再配上相应的应用程序，完成各种实际应用项目。<br>&emsp;&emsp;这次的实验感觉挺难的，主要的困难来自对程序的理解。功夫不负有心人，经过自己的不懈努力，最后对实验的原理有了清晰的认识。虽然无法从上位机传输数据指令操作，但是就系统功能来说，我觉得还是做的可以的。<br>&emsp;&emsp;这次课设却让我们对实验板有了足够的了解，让我们知道了实验板上各个模块的用法;而且它还让我们对自己动手写程序来控制实验台的运作有了一定的基础。虽然实验板只是一个小型的模拟平台，但是通过对它的学习和操作，我们对有关接口的知识将会有一个更广泛的认识，而且它对我们以后的学习也会有帮助的。<br>&emsp;&emsp;总之，这次课程设计对于我有很大的帮助，通过课程设计，我更加深入地理解了，微机原理课程上讲到的各种芯片的功能，以及引脚的作用，同时加深了对于主要芯片的应用的认识，同时在实验室的环境里熟悉了程序的编写过程和运行过程，最后还提高了自己的动手能力，真的很感谢老师们的悉心指导。</p>
]]></content>
  </entry>
</search>
